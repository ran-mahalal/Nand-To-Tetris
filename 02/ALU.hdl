// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Not16(in=x , out=notx ); //notx
    Not16(in=y , out=noty ); //noty
    And16(a=x , b=notx , out=zerox ); //zerox
    And16(a=y , b=noty , out=zeroy ); //zeroy
    Mux16(a=x , b=zerox , sel=zx , out=xafterzx ); //computes x after zx
    Not16(in=xafterzx , out=notxafterzx ); //notxafterzx 
    Mux16(a=xafterzx , b=notxafterzx , sel=nx , out=xafternx ); //computes x after nx
    Mux16(a=y , b=zeroy , sel=zy , out=yafterzy ); //computes y after zy 
    Not16(in=yafterzy, out=notyafterzy );
    Mux16(a=yafterzy , b=notyafterzy , sel=ny , out=yafterny ); //computes y after ny 
    Add16(a =xafternx , b =yafterny , out =xplusy ); //xplusy
    And16(a=xafternx , b=yafterny , out=xandy ); //xandy
    Mux16(a=xandy , b=xplusy , sel=f , out=afterf ); //computes after f
    Not16(in=afterf , out=notafterf ); //negates result after f 
    Mux16(a=afterf , b=notafterf , sel=no , out=out , out[15]=ng, out[0..7] = out1, out[8..15] = out2  );//computes out, sets ng
    Or8Way(in=out1 , out=zr1 );//or on first 8 bits
    Or8Way(in=out2 , out=zr2 ); //or on last 8 bits
    Or(a=zr1 , b=zr2 , out=zrlast ); 
    //we now have zrlast = 1 only if out is not 0. we demand the opposite.
    Not(in=zrlast , out=zr );
    
    

    

    
}